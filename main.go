package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

// üîÅ –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –±—É–∫–≤—ã –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ
func reverseWords(input string) string {
	words := strings.Fields(input)
	var reversedWords []string

	for _, word := range words {
		runes := []rune(word)
		for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
			runes[i], runes[j] = runes[j], runes[i]
		}
		reversedWords = append(reversedWords, string(runes))
	}
	return strings.Join(reversedWords, " ")
}

// üîÑ –ú–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —á—ë—Ç–Ω—ã–µ –∏ –Ω–µ—á—ë—Ç–Ω—ã–µ –±—É–∫–≤—ã
func swapEvenOddRunes(s string) string {
	runes := []rune(s)
	for i := 0; i < len(runes)-1; i += 2 {
		runes[i], runes[i+1] = runes[i+1], runes[i]
	}
	return string(runes)
}

// üîí –®–∏—Ñ—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç, –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∞ –±—É–∫–≤
func encrypt(text string) string {
	reversed := reverseWords(text)
	words := strings.Fields(reversed)
	for i := range words {
		words[i] = swapEvenOddRunes(words[i])
	}
	return strings.Join(words, " ")
}

// üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç: —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ –±—É–∫–≤—ã, –ø–æ—Ç–æ–º –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç
func decrypt(text string) string {
	words := strings.Fields(text)
	for i := range words {
		words[i] = swapEvenOddRunes(words[i]) // –±—É–∫–≤—ã –æ–±—Ä–∞—Ç–Ω–æ –º–µ—Å—Ç–∞–º–∏
	}
	result := strings.Join(words, " ")
	return reverseWords(result) // —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
}

func main() {
	reader := bufio.NewReader(os.Stdin)

	fmt.Print("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç: ")
	input, _ := reader.ReadString('\n')
	input = strings.TrimSpace(input)

	fmt.Println("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")
	fmt.Println("1 - –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
	fmt.Println("2 - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
	fmt.Print("–¢–≤–æ–π –≤—ã–±–æ—Ä: ")

	choiceInput, _ := reader.ReadString('\n')
	choice := strings.TrimSpace(choiceInput)

	switch choice {
	case "1":
		result := encrypt(input)
		fmt.Println("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", result)
	case "2":
		result := decrypt(input)
		fmt.Println("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", result)
	default:
		fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
	}
}
